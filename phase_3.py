# -*- coding: utf-8 -*-
"""Phase 3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l-f04CDaMSIKi1oY-g2Gk_O2IXT5ebpH
"""

import pandas as pd
import re
import nltk
import joblib
import streamlit as st
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

nltk.download('stopwords')
nltk.download('wordnet')

# Load Dataset
df = pd.read_csv("https://raw.githubusercontent.com/datasets/sentiment140/master/data/twitter.csv", encoding='latin-1', header=None)
df.columns = ['target', 'id', 'date', 'query', 'user', 'text']

# Preprocess Text
lemmatizer = WordNetLemmatizer()
stop_words = set(stopwords.words('english'))

def preprocess(text):
    text = re.sub(r"http\S+|@\S+|[^a-zA-Z\s]", "", text)
    text = text.lower()
    tokens = text.split()
    cleaned = [lemmatizer.lemmatize(word) for word in tokens if word not in stop_words]
    return " ".join(cleaned)

df['cleaned_text'] = df['text'].apply(preprocess)

# Prepare Data
vectorizer = TfidfVectorizer(max_features=5000)
X = vectorizer.fit_transform(df['cleaned_text']).toarray()
y = df['target'].replace({0: 0, 2: 2, 4: 4})  # 0 = Negative, 2 = Neutral, 4 = Positive

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Evaluate
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Report:\n", classification_report(y_test, y_pred))

# Save model & vectorizer
joblib.dump(model, 'sentiment_model.pkl')
joblib.dump(vectorizer, 'vectorizer.pkl')

# Streamlit App
st.title("Sentiment Analysis of Social Media Text")
user_input = st.text_area("Enter a social media message:")

if st.button("Analyze"):
    cleaned = preprocess(user_input)
    vectorized = vectorizer.transform([cleaned])
    prediction = model.predict(vectorized)[0]
    label = {0: 'Negative', 2: 'Neutral', 4: 'Positive'}[prediction]
    st.success(f"Predicted Sentiment: {label}")